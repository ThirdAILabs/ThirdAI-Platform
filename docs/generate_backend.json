{
    "openapi": "3.1.0",
    "info": {
      "title": "Generative AI API",
      "version": "1.0.0",
      "description": "API for generating text using a specified generative AI model via WebSocket."
    },
    "paths": {
      "/generate": {
        "post": {
          "summary": "Generate text",
          "description": "WebSocket endpoint to generate text using a specified generative AI model.\n\nParameters:\n- WebSocket connection.\n\nExpected Message Format:\n```\n{\n    \"query\": \"Your input text\",\n    \"model\": \"Model name\",\n    \"provider\": \"AI provider\",\n    \"key\": \"Optional API key\"\n}\n```\n\nResponse Messages:\n- Success message with generated content:\n```\n{\n    \"status\": \"success\",\n    \"content\": \"Generated text\",\n    \"end_of_stream\": False\n}\n```\n- Error message in case of invalid arguments:\n```\n{\n    \"status\": \"error\",\n    \"detail\": \"Invalid arguments\",\n    \"errors\": [{\"loc\": [\"field\"], \"msg\": \"Error message\", \"type\": \"error type\"}],\n    \"end_of_stream\": True\n}\n```\n- Error message in case of missing API key:\n```\n{\n    \"status\": \"error\",\n    \"detail\": \"No generative AI key provided\",\n    \"end_of_stream\": True\n}\n```\n- Error message in case of unsupported provider:\n```\n{\n    \"status\": \"error\",\n    \"detail\": \"Unsupported provider\",\n    \"end_of_stream\": True\n}\n```\n- Error message in case of an unexpected error:\n```\n{\n    \"status\": \"error\",\n    \"detail\": \"Unexpected error\",\n    \"end_of_stream\": True\n}\n```\n\nExample:\n1. Client sends:\n```\n{\n    \"query\": \"Tell me a story\",\n    \"model\": \"gpt-3\",\n    \"provider\": \"openai\",\n    \"key\": \"your-api-key\"\n}\n```\n\n2. Server sends (multiple messages as content is generated):\n```\n{\n    \"status\": \"success\",\n    \"content\": \"Once upon a time, \",\n    \"end_of_stream\": False\n}\n...\n{\n    \"status\": \"success\",\n    \"content\": \"they lived happily ever after.\",\n    \"end_of_stream\": True\n}\n```",
          "responses": {
            "101": {
              "description": "Switching Protocols - Switching to WebSocket protocol"
            },
            "400": {
              "description": "Bad Request - Invalid arguments",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized - No generative AI key provided",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found - Unsupported provider",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error - Unexpected error or error while generating content",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "requestBody": {
            "description": "Parameters for generating text",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateArgs"
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "GenerateArgs": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The input text for generation",
              "example": "Tell me a story"
            },
            "model": {
              "type": "string",
              "description": "The name of the generative AI model to use",
              "example": "gpt-3"
            },
            "provider": {
              "type": "string",
              "description": "The provider of the AI model",
              "example": "openai"
            },
            "key": {
              "type": "string",
              "description": "Optional API key for the AI provider",
              "example": "your-api-key"
            }
          },
          "required": ["query", "model", "provider"]
        },
        "ErrorResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the response",
              "example": "error"
            },
            "detail": {
              "type": "string",
              "description": "Detail of the error",
              "example": "Invalid arguments"
            },
            "errors": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "loc": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": ["field"]
                  },
                  "msg": {
                    "type": "string",
                    "description": "Error message",
                    "example": "Error message"
                  },
                  "type": {
                    "type": "string",
                    "description": "Error type",
                    "example": "error type"
                  }
                }
              }
            },
            "end_of_stream": {
              "type": "boolean",
              "description": "Indicator if it is the end of the stream",
              "example": true
            }
          }
        },
        "SuccessResponse": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Status of the response",
              "example": "success"
            },
            "content": {
              "type": "string",
              "description": "Generated text content",
              "example": "Generated text"
            },
            "end_of_stream": {
              "type": "boolean",
              "description": "Indicator if it is the end of the stream",
              "example": false
            }
          }
        }
      }
    }
  }
  