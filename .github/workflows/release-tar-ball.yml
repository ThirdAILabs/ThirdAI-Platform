name: Release tarball

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
on:
  release:
    types: [published] # This triggers the workflow when a new release is published
  
  workflow_dispatch: # Allows manual triggering of the workflow
    # This workflow won't delete the docker images and tarball if tests failed. For testing use, end_to_end_testing workflow
    inputs:
      installer_branch_name:
        description: "Ansible-repo branch name"
        type: string
        default: main
      
      docker_image_branch_name:
        description: "Branch name of the docker images. This name will be also used to create packaging. Helpful to release tarballs on a different branch"
        required: true
      
      image_version:
        description: "Docker image version"
        required: true
      
jobs:
  Gather_facts:
    runs-on: ubuntu-latest

    outputs:
      image_version: "${{ steps.docker_image_version.outputs.image_version }}"
      docker_image_branch_name: ${{ steps.docker_image_branch_name.outputs.branch_name }}
      installer_branch_name: ${{ steps.installer_branch.outputs.installer_branch_name }}
    steps:
      - name: Get the new version of the docker images
        id: docker_image_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            image_version=${{ inputs.image_version }}
          else
            # github.event.release.tag_name contains prefix 'v'. Need to save version without this prefix
            image_version="${{ github.event.release.tag_name }}"
          fi

          echo "Next version: $image_version"

          # removing prefix 'v' from the version (if present)
          echo "image_version=${image_version#v}" >> $GITHUB_OUTPUT

      - name: Set the branch name of the docker images
        id: docker_image_branch_name
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            branch_name=${{ inputs.docker_image_branch_name }}
          else
            branch_name="release-test-main"
          fi
          echo "Docker image branch to build on: $branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
      
      - name: Set the installer branch name
        id: installer_branch
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            installer_branch_name=${{ inputs.installer_branch_name }}
          else
            installer_branch_name="main"
          fi
          echo "Installer branch name: $installer_branch_name"
          echo "installer_branch_name=$installer_branch_name" >> $GITHUB_OUTPUT
  
  Versioned_build_and_push_images:
    needs: [Gather_facts]
    uses: ./.github/workflows/build_and_push_images.yml
    with:
      docker_image_branch_name: ${{ needs.Gather_facts.outputs.docker_image_branch_name }}
      docker_image_version: ${{ needs.Gather_facts.outputs.image_version }}
      dont_update_latest: true
    secrets:
      azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  package:
    needs: [Gather_facts, Versioned_build_and_push_images]
    uses: ./.github/workflows/packaging.yml
    with:
      Installer_branch_name: ${{ needs.Gather_facts.outputs.installer_branch_name }}
      docker_image_branch_name: ${{ needs.Gather_facts.outputs.docker_image_branch_name }}
      docker_image_version: "v${{ needs.Gather_facts.outputs.image_version }}"
      b64_encoded_docker_registry_pull_password: ${{ needs.Versioned_build_and_push_images.outputs.b64_encoded_docker_registry_pull_password }}
    secrets:
      PLATFORM_INSTALLATION_DEPLOY_KEY: ${{ secrets.PLATFORM_INSTALLATION_DEPLOY_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
  tests_on_ec2:
    needs: [Gather_facts, Versioned_build_and_push_images, package]
    uses: ./.github/workflows/integration_testing.yml
    with:
      docker_image_branch_name: ${{ needs.Gather_facts.outputs.docker_image_branch_name }}
      docker_image_version: "v${{ needs.Gather_facts.outputs.image_version }}"
      b64_encoded_docker_registry_pull_password: ${{ needs.Versioned_build_and_push_images.outputs.b64_encoded_docker_registry_pull_password }}
      tarball_filename: ${{ needs.package.outputs.online_package_name }}
      # email: gautam@thidai.com (default)
      # password: password (default)
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      HOST_MACHINE_PRIVATE_KEY: ${{ secrets.HOST_MACHINE_PRIVATE_KEY }}
      GENAI_KEY: ${{ secrets.GENAI_KEY }}
      HOST_MACHINE1: ${{ secrets.HOST_MACHINE1 }}
      HOST_MACHINE2: ${{ secrets.HOST_MACHINE2 }}

  # Removes branch_image:version from the registry and tarball from s3 bucket
  conditional_cleanup:
    needs: [Gather_facts, Versioned_build_and_push_images, package, tests_on_ec2]
    # Delete the tagged image and tarball from s3 bucket if the event is 'release' and test was failed.
    if: ${{ always() && github.event_name == 'release' && needs.Versioned_build_and_push_images.result == 'success' && needs.tests_on_ec2.result != 'success' }}
    uses: ./.github/workflows/cleanup.yml
    with:
      docker_image_branch_name: ${{ needs.Gather_facts.outputs.docker_image_branch_name }}
      docker_image_version: ${{ needs.Gather_facts.outputs.image_version }}
      offline_package_name: ${{ needs.package.outputs.offline_package_name }}
      online_package_name: ${{ needs.package.outputs.online_package_name }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  Latest_image_migration:
    needs: [Gather_facts, Versioned_build_and_push_images, package, tests_on_ec2]
    if: ${{ always() && needs.Versioned_build_and_push_images.result == 'success' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'release' && needs.tests_on_ec2.result == 'success'))}}
    # push the latest images if the event is 'workflow_dispatch' (irrespective of passing or failing the test) OR the event is 'release' and tests are passed
    runs-on: ubuntu-latest-8-cores
    steps:
      - name: "Azure Login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Update the latest tagged image for the main branch
        run: |
          az acr import \
            --name thirdaiplatform \
            --source thirdaiplatform.azurecr.io/thirdai_platform_release-test-main:v${{ needs.Gather_facts.outputs.image_version }} \
            --image thirdai_platform_release-test-main:latest \
            --force
          
          az acr import \
            --name thirdaiplatform \
            --source thirdaiplatform.azurecr.io/frontend_release-test-main:v${{ needs.Gather_facts.outputs.image_version }} \
            --image frontend_release-test-main:latest \
            --force
          