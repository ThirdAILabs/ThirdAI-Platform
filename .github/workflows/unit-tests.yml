name: Unit Tests

# Kills old jobs from the same pr if we push a new commit
# See https://stackoverflow.com/questions/66335225/how-to-cancel-previous-runs-in-the-pr-when-you-push-new-commitsupdate-the-curre
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PRODUCT_VERSION: "latest"
  
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  backend-unit-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: model_bazaar
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - uses: actions/checkout@v2

      - name: install dependencies
        run: |
          pip3 install -r thirdai_platform/requirements.txt
          pip3 install pytest
          pip3 install pyopenssl --upgrade

      - name: Setup `nomad`
        uses: hashicorp/setup-nomad@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Start Nomad in Development Mode
        run: |
          NOMAD_PATH=$(which nomad)
          nohup sudo $NOMAD_PATH agent -dev -config="local_setup/agent.hcl" > nomad.log 2>&1 &
          echo "NOMAD_ENDPOINT=http://localhost:4646/" >> $GITHUB_ENV
      
      - name: Verify Nomad Cluster
        run: |
          NOMAD_PATH=$(which nomad)
          echo $NOMAD_PATH
          sleep 10 && $NOMAD_PATH node status

      - name: Install Traefik
        run: |
          wget https://github.com/traefik/traefik/releases/download/v3.1.2/traefik_v3.1.2_linux_amd64.tar.gz
          sudo tar -xf traefik_v3.1.2_linux_amd64.tar.gz -C /usr/local/bin

      - name: Run Traefik
        run: |
          cd local_setup
          nohup sudo bash launch_traefik.sh > traefik.log 2>&1 &
          cd ..
          echo "PUBLIC_MODEL_BAZAAR_ENDPOINT=http://localhost:80/" >> $GITHUB_ENV
          echo "PRIVATE_MODEL_BAZAAR_ENDPOINT=http://localhost:80/" >> $GITHUB_ENV

      - name: Install Vault
        run: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update
          sudo apt-get install -y vault
          echo "HASHICORP_VAULT_ENDPOINT=http://127.0.0.1:8200" >> $GITHUB_ENV
          echo "HASHICORP_VAULT_TOKEN=00000000-0000-0000-0000-000000000000" >> $GITHUB_ENV

      - name: Start Vault Server
        run: nohup vault server --dev --dev-root-token-id="00000000-0000-0000-0000-000000000000" > vault.log 2>&1 &

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Create Extension
        run: |
          export PGPASSWORD='password'
          psql -h localhost -U postgres -d model_bazaar -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"
          echo "DB_BASE_URI=postgresql://postgres:password@localhost:5432" >> $GITHUB_ENV

      - name: run unit tests
        run: |
          python3 -m pytest ./thirdai_platform/tests -v

      - name: Stop Services
        if: always()
        run: |
          sudo systemctl stop postgresql
          sudo killall nomad
          sudo killall vault
          sudo killall traefik

  train-job-unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: install dependencies
      run: |
        pip3 install -r train_job/requirements.txt
        pip3 install pytest
    - name: run unit tests
      run: |
        python3 -m pytest ./train_job -v
