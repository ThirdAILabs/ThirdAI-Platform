name: Build and push docker images

on:
  workflow_call:
    inputs:
      docker_image_branch_name:
        description: "Branch name of the docker images"
        required: true
        type: string
      docker_image_version:
        description: "Docker image version (without prefix 'v')"
        required: true
        type: string
    secrets:
      AZURE_CREDENTIALS:
        description: 'Azure credentials'
        required: true
    outputs:
      pull_password:
        description: "Docker registry password for the image built"
        value: ${{ jobs.build_docker_images.outputs.pull_password }}
      var:
        description: Random output
        value: ${{ jobs.build_docker_images.outputs.var }}

jobs:
  build_docker_images:
    runs-on: ubuntu-latest-8-cores
    outputs:
      pull_password: ${{ steps.docker_registry.outputs.pull_password }}
      var: ${{ steps.docker_registry.outputs.var }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      
      # - name: "Azure Login"
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Build and push docker images to the repository
      #   run: |
      #     cd release
      #     pip install -r requirements.txt
      #     python3 push.py -b ${{ inputs.docker_image_branch_name }} --config config.yaml --no-cache --version ${{ inputs.docker_image_version }}
        
      # - name: Install yq for YAML parsing
      #   run: |
      #       sudo add-apt-repository ppa:rmescandon/yq
      #       sudo apt update
      #       sudo apt install yq -y
      
      - name: Extract the docker registry_password
        id: docker_registry
        run: |
          pull_password=$(yq e '.azure.branches.${{ inputs.docker_image_branch_name }}.pull_credentials.password' $GITHUB_WORKSPACE/release/config.yaml)
          if [ -z "$pull_password" ]; then
            echo "::error::No pull password found for branch ${{ inputs.docker_image_branch_name }}"
            exit 1
          fi

          echo "var=1234" >> $GITHUB_OUTPUT

          random_secret_key=$(head -c 32 /dev/urandom | base64)
          echo "$random_secret_key"  
          echo "pull_password=$random_secret_key" >> $GITHUB_OUTPUT

          # Log only the encoded value