name: End to end integration testing

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      installer_branch_name:
        description: "Ansible-repo branch name"
        type: string
        default: main
  pull_request:
    branches: [ main ]
jobs:
  Retrieve_facts:
    runs-on: ubuntu-latest
    environment:
      name: docker_tests
    outputs:
      version: "${{ steps.docker_image_version.outputs.version }}"
      docker_image_branch_name: ${{ steps.docker_image_branch_name.outputs.branch_name }}

    steps:
      - name: Get the new version of the docker images
        id: docker_image_version
        run: |
          version="0.0.2"
          echo "Generated version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set the branch name of the docker images
        id: docker_image_branch_name
        run: |
          branch_name="test-installation-testing-2"
          echo "Docker image branch to build on: $branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

  # Build_and_push_images:
  #   needs: [Retrieve_facts]
  #   uses: ./.github/workflows/build_and_push_images.yml
  #   with:
  #     docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
  #     docker_image_version: ${{ needs.Retrieve_facts.outputs.version }}
  #   secrets:
  #     azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  # package:
  #   needs: [Retrieve_facts]
  #   uses: ./.github/workflows/packaging.yml
  #   with:
  #     Installer_branch_name: "dont-wait-for-keycloak"
  #     docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
  #     docker_image_version: "v${{ needs.Retrieve_facts.outputs.version }}"
  #     b64_encoded_docker_registry_password: ${{ needs.Build_and_push_images.outputs.b64_encoded_docker_registry_password }}
  #   secrets:
  #     PLATFORM_INSTALLATION_DEPLOY_KEY: ${{ secrets.PLATFORM_INSTALLATION_DEPLOY_KEY }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  # Debug:
  #   runs-on: ubuntu-latest
  #   needs: [Retrieve_facts]
  #   outputs:
  #     docker_registry_password: ${{ steps.password.outputs.b64_docker_registry_password }}
  #   steps:
  #     - name: print the output values
  #       id: password
  #       run: |
  #         echo "b64_docker_registry_password=QTlaWkZGTzMvdDU3dk5xWlE2V0lCTi9YeXpZeHMxMWtiRzZha0diUlVTK0FDUkRRWlhSNgo=" >> $GITHUB_OUTPUT

  # tests_on_ec2:
  #   needs: [Retrieve_facts, Build_and_push_images]
  #   uses: ./.github/workflows/integration_testing.yml
  #   with:
  #     docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
  #     docker_image_version: "v${{ needs.Retrieve_facts.outputs.version }}"
  #     b64_encoded_docker_registry_password: ${{ needs.Build_and_push_images.outputs.b64_encoded_docker_registry_password }}
  #     tarball_filename: "thirdai-platform-package-test-installation-testing-2-v0.0.2.tar.gz"
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     HOST_MACHINE_PRIVATE_KEY: ${{ secrets.HOST_MACHINE_PRIVATE_KEY }}
  #     EMAIL: "gautam@thirdai.com"
  #     PASSWORD: "password"
  #     GENAI_KEY: ${{ secrets.GENAI_KEY }}
  
  # debug:
  #   runs-on: ubuntu-latest
  #   needs: [tests_on_ec2]
  #   steps:
  #     - name: print variables
  #       run: |
  #         echo "backend test: ${{ needs.tests_on_ec2.outputs.backend_test_outcome }}"
  #         echo "frontend test: ${{ needs.tests_on_ec2.outputs.frontend_test_outcome }}"
      
  # cleanup:
  #   needs: [Retrieve_facts]
  #   uses: ./.github/workflows/cleanup.yml
  #   with:
  #     docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
  #     docker_image_version: ${{ needs.Retrieve_facts.outputs.version }}
  #     offline_package_name: "thirdai-platform-package-test-installation-testing-2-v0.0.2.tar.gz"
  #     online_package_name: "thirdai-platform-package-offline-test-installation-testing-2-v0.0.2.tar.gz"
  #   secrets:
  #     AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #     AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  Delete_credentials:
    runs-on: ubuntu-latest-8-cores
    needs: [Retrieve_facts]

    steps:
      - name: "Azure Login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete the score map associated with the branch image
        # Making sure that branch is not 'release-test-main'
        if: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name != 'release-test-main' }}
        run: |
          az acr scope-map delete --name "thirdaiplatform-push-${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}" --registry-name thirdaiplatform --yes
          az acr scope-map delete --name "thirdaiplatform-pull-${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}" --registry-name thirdaiplatform --yes

      - name: Delete the token map associated with the branch image
        # Making sure that branch is not 'release-test-main'
        if: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name != 'release-test-main' }}
        run: |
          az acr token delete --name "thirdaiplatform-pull-${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}" --registry-name thirdaiplatform --yes
          az acr token delete --name "thirdaiplatform-pull-${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}" --registry-name thirdaiplatform --yes

          echo "printed again"
