name: End to end integration testing

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      installer_branch_name:
        description: "Ansible-repo branch name"
        type: string
        default: main
  pull_request:
    branches: [ main ]
jobs:
  Retrieve_facts:
    runs-on: ubuntu-latest

    outputs:
      version: "${{ steps.docker_image_version.outputs.version }}"
      docker_image_branch_name: ${{ steps.docker_image_branch_name.outputs.branch_name }}

    steps:
      - name: Get the new version of the docker images
        id: docker_image_version
        run: |
          version="0.0.1"
          echo "Generated version: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Set the branch name of the docker images
        id: docker_image_branch_name
        run: |
          branch_name="test-installation-testing"
          echo "Docker image branch to build on: $branch_name"
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT

  # Build_and_push_images:
  #   needs: [Retrieve_facts]
  #   uses: ./.github/workflows/build_and_push_images.yml
  #   with:
  #     docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
  #     docker_image_version: ${{ needs.Retrieve_facts.outputs.version }}
  #   secrets:
  #     azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

  # package:
  #   needs: [Retrieve_facts]
  #   uses: ./.github/workflows/packaging.yml
  #   with:
  #     Installer_branch_name: main
  #     docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
  #     docker_image_version: "v${{ needs.Retrieve_facts.outputs.version }}"
  #     docker_registry_password: "C9Eu9ENcS5YojZoK5yC+bLikeNt7s1LnRgRdGq+sbV+ACRBpRw9s"
  #   secrets:
  #     PLATFORM_INSTALLATION_DEPLOY_KEY: ${{ secrets.PLATFORM_INSTALLATION_DEPLOY_KEY }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      
  run_tests:
    needs: [Retrieve_facts]
    uses: ./.github/workflows/integration_testing.yml
    with:
      docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
      docker_image_version: "v${{ needs.Retrieve_facts.outputs.version }}"
      docker_registry_password: "/+rpgJ/yJ9dm3uqlFVyvrM2cUKPW1T5vcBzmKevLUp+ACRAU9thF"
      tarball_filename: "thirdai-platform-package-test-installation-testing-v766.309.855.tar.gz"
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      HOST_MACHINE_PRIVATE_KEY: ${{ secrets.HOST_MACHINE_PRIVATE_KEY }}
      HOST_MACHINE_PUBLIC_KEY: ${{ secrets.HOST_MACHINE_PUBLIC_KEY }}
      EMAIL: "gautam@thirdai.com"
      PASSWORD: "password"
      GENAI_KEY: ${{ secrets.GENAI_KEY }}
      
  # cleanup:
  #   needs: [Retrieve_facts, Build_and_push_images, package, run_tests]
  #   uses: ./.github/workflows/cleanup.yml
  #   with:
  #     docker_image_branch_name: ${{ needs.Retrieve_facts.outputs.docker_image_branch_name }}
  #     docker_image_version: ${{ needs.Retrieve_facts.outputs.version }}
  #     offline_package_name: ${{ needs.package.outputs.offline_package_name }}
  #     online_package_name: ${{ needs.package.outputs.online_package_name }}
  #   secrets:
  #     AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  #     AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  #     AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}