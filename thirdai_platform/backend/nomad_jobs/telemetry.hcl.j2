job "telemetry" {
  datacenters = ["dc1"]
  type        = "service"
  {% set nomad_monitoring_dir = "/model_bazaar/nomad-monitoring" -%}
  group "telemetry" {
    count = 1
    {#
      If there are more than one node in the cluster, 
        then this constraint ensures that telemetry job always run on client node,

      The issue originates from ownerships of files created by victoriametric on nfs.
        - If server starts the job, files created is having (root, nomad_nfs) as ownership and group ownership
        - If client starts the job, files created is having (nomad_nfs, nomad_nfs) as ownership and group ownership,
        so, different node class is unable to restart the victoriametric task.
      
      Incase multiple nodes are in the cluster,
        Assumption: There will be more client nodes than server.
        so constrain the job to always get scheduled on client node.
    #}
    {% if platform == "docker" and target_count != "1" -%}
    constraint {
      attribute = "${node.class}"
      value     = "web_ingress"
      operator = "!="
    }
    {%- endif %}

    network {
      port "vicky-http" {
        to = 8428
      }

      port "grafana-http" {
        to = 3000
      }
    }

    task "victoriametrics" {
      driver = "docker"

      service {
        name     = "vicky-web"
        provider = "nomad"
        port     = "vicky-http"
        tags = [
          "traefik.enable=true",
          "traefik.http.routers.vicky-http.rule=PathPrefix(`/victoriametrics`)",
          "traefik.http.routers.vicky-http.priority=10"
        ]
      }

      config {
        image = "{{ registry }}/victoria-metrics:tags-v1.102.1-1-g76115c611f"
        auth {
            username = "{{ docker_username }}"
            password = "{{ docker_password }}"
            server_address = "{{ registry }}"
          }
        
        ports = ["vicky-http"]
        args = [
          "--storageDataPath={{ nomad_monitoring_dir }}/victoriametric",
          "--retentionPeriod=10d",
          "--httpListenAddr=:${NOMAD_PORT_vicky_http}",
          "--promscrape.config={{ nomad_monitoring_dir }}/node_discovery/prometheus.yaml",
          "--http.pathPrefix=/victoriametrics"
        ]
        {% if platform == "local" -%}
        extra_hosts = ["host.docker.internal:host-gateway"]
        {%- endif %}
        volumes = [
          "{{ share_dir }}:/model_bazaar"
        ]
      }
      resources {
        cpu    = 256
        memory = 600
      }
    }

    task "grafana" {
      lifecycle {
        hook = "poststart"
        sidecar = true
      }

      driver = "docker"

      env {
        GF_LOG_LEVEL          = "DEBUG"
        GF_LOG_MODE           = "console"
        GF_SECURITY_ADMIN_USER = "{{ admin_username }}"
        GF_SECURITY_ADMIN_EMAIL = "{{ admin_mail }}"
        GF_SECURITY_ADMIN_PASSWORD = "{{ admin_password }}"
        GF_DATABASE_URL = "{{ grafana_db_url }}"
        GF_SERVER_ROOT_URL = "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
        GF_SERVER_SERVE_FROM_SUB_PATH = "true"
        GF_SERVER_HTTP_PORT   = "${NOMAD_PORT_http}"
        GF_PATHS_PROVISIONING = "/local/grafana/provisioning"
        GF_PATHS_DATA = "{{ nomad_monitoring_dir }}/grafana"
      }

      config {
        image = "{{ registry }}/grafana:main-ubuntu"
        auth {
          username = "{{ docker_username }}"
          password = "{{ docker_password }}"
          server_address = "{{ registry }}"
        }
        group_add = ["4646"]
        ports = ["grafana-http"]
        volumes = [
          "{{ share_dir }}:/model_bazaar"
        ]
      }

      service {
        name = "grafana"
        port = "grafana-http"
        provider = "nomad"
        tags = [
          "traefik.enable=true",
          "traefik.http.routers.grafana-http.rule=PathPrefix(`/grafana`)",
          "traefik.http.routers.grafana-http.priority=10"
        ]
      }

      resources {
        cpu    = 256
        memory = 300
      }

      template {
        data        = <<EOF
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    {% if platform == "local" -%}
    url: http://host.docker.internal/victoriametrics
    {%- else -%}
    url: http://{{ model_bazaar_private_host }}/victoriametrics
    {%- endif %}
    isDefault: true
    editable: false
EOF
        destination = "/local/grafana/provisioning/datasources/datasources.yaml"
      }

      template {
        data        = <<EOF
apiVersion: 1
providers:
  - name: dashboards
    type: file
    disableDeletion: true
    updateIntervalSeconds: 10
    allowUiUpdates: true
    options:
      foldersFromFilesStructure: true
      path: {{ nomad_monitoring_dir }}/grafana_dashboards
EOF
        destination = "/local/grafana/provisioning/dashboards/dashboards.yaml"
      }
    }
  }
}