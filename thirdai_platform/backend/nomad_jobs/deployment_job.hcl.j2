job "deployment-{{ model_id }}" {
  datacenters = ["dc1"]

  type = "service"

  # Autoscaling enabled
  group "deployment" {
    count = 1

    scaling {
      enabled = "{{ autoscaling_enabled }}"
      min = 1
      max = "{{ autoscaler_max_count }}"
      policy {
        cooldown = "1m"
        evaluation_interval = "30s"
        check "avg_cpu" {
          source = "nomad-apm"
          query = "avg_cpu-allocated"
          query_window = "1m"
          strategy "target-value" {
            target = 70
          }
        }
      }
    }

    network {
      port "{{ model_id }}-http" {
        {% if platform == "docker" %}
          to = 80
        {% endif %}
      }
    }

    service {
      name = "{{ model_id }}"
      port = "{{ model_id }}-http"
      provider = "nomad"

      tags = [
        "traefik.enable=true",
        "traefik.http.routers.{{ model_id }}-http.rule=PathPrefix(`/{{ model_id }}/`)",
        "traefik.http.routers.{{ model_id }}-http.priority=10"
      ]
    }

    task "backend" {
      {% if platform == "local" %}
        driver = "raw_exec"
      {% elif platform == "docker" %}  
        driver = "docker"

      template {
        destination = "${NOMAD_SECRETS_DIR}/env.vars"
        env         = true
        change_mode = "restart"
        data        = <<EOF
{% raw %}
{{- with nomadVar "nomad/jobs" -}}
TASK_RUNNER_TOKEN = {{ .task_runner_token }}
{{- end -}}
{% endraw %}
EOF
      }

      {% endif %}

      env {
        MODEL_ID = "{{ model_id }}"
        MODEL_BAZAAR_ENDPOINT = "{{ model_bazaar_endpoint }}"
        LICENSE_KEY = "{{ license_key }}"
        GENAI_KEY = "{{ genai_key }}"
        TYPE = "{{ type }}"
        SUB_TYPE = "{{ sub_type }}"
        AWS_ACCESS_KEY = "{{ aws_access_key }}"
        AWS_ACCESS_SECRET = "{{ aws_access_secret }}"
        {% if platform == "local" %}
          MODEL_BAZAAR_DIR = "{{ share_dir }}"
        {% elif platform == "docker" %}  
          MODEL_BAZAAR_DIR = "/model_bazaar"
        {% endif %}

        TASK_RUNNER_TOKEN = "${TASK_RUNNER_TOKEN}"
      }

      config {
        {% if platform == "docker" %}  
          image = "{{ registry }}/{{ image_name }}:{{ tag }}"
          image_pull_timeout = "15m"
          ports = ["{{ model_id }}-http"]
          group_add = ["4646"]
          auth {
            username = "{{ docker_username }}"
            password = "{{ docker_password }}"
            server_address = "{{ registry }}"
          }
          volumes = [
            "{{ share_dir }}:/model_bazaar"
          ]
        {% elif platform == "local" %}
          command = "{{ python_path }}"
          args    = ["-m", "uvicorn", "main:app","--app-dir","{{ deployment_app_dir }}","--reload","--host","0.0.0.0","--port","${NOMAD_PORT_{{ model_id | replace("-", "_") }}_http}"]
        {% endif %}
      }

      resources {
        cpu = 2400
        memory = {{ memory }}
        memory_max = {{ 4 * memory }}

      }
    }
  }

  group "worker" {
    count = 1  # Number of worker instances

    network {
      port "http" {}
    }

    task "worker" {
      driver = "raw_exec"
      env {
        REDIS_HOST = "localhost"
        REDIS_PORT = "6379"
        MODEL_ID = "{{ model_id }}"
        MODEL_BAZAAR_ENDPOINT = "{{ model_bazaar_endpoint }}"
        LICENSE_KEY = "{{ license_key }}"
        GENAI_KEY = "{{ genai_key }}"
        TYPE = "{{ type }}"
        SUB_TYPE = "{{ sub_type }}"
        AWS_ACCESS_KEY = "{{ aws_access_key }}"
        AWS_ACCESS_SECRET = "{{ aws_access_secret }}"
        {% if platform == "local" %}
          MODEL_BAZAAR_DIR = "{{ share_dir }}"
        {% elif platform == "docker" %}  
          MODEL_BAZAAR_DIR = "/model_bazaar"
        {% endif %}

        TASK_RUNNER_TOKEN = "${TASK_RUNNER_TOKEN}"
      }

      config {
        command = "{{ python_path }}"
        args = ["{{ deployment_app_dir }}/worker.py"]  # The script that should be run in both platforms
      }

      resources {
        cpu = 2400
        memory = {{ memory }}
        memory_max = {{ 4 * memory }}
      }
    }
  }
}