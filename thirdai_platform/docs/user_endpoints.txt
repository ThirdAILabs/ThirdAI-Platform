# Email Signup

**Description**: Sign up a new user with email and password.

**Dependencies**:
- No dependencies for this endpoint (open to public).

**Request Body**:
```json
{
  "username": "johndoe",
  "email": "johndoe@example.com",
  "password": "securepassword"
}
```

**Responses**:
- `200 OK`: User signed up successfully.
```json
  {
    "message": "Successfully signed up via email.",
    "data": {
      "user": {
        "username": "johndoe",
        "email": "johndoe@example.com",
        "user_id": "123"
      }
    }
  }
```
  
- `400 Bad Request`: Email or username already exists.
```json
  {
    "message": "There is already an account associated with this email."
  }
```

- `500 Internal Server Error`: Database errors or email sending issues.

---

# Add Global Admin

**Description**: Promote a user to global admin.

**Dependencies**:
- **global_admin_only**: Only users with global admin privileges can access this endpoint.

**Request Body**:
```json
{
  "email": "user@example.com"
}
```

**Responses**:
- `200 OK`: User promoted to global admin.
```json
  {
    "message": "User user@example.com has been successfully added as a global admin."
  }
```

- `400 Bad Request`: User not found.
```json
  {
    "message": "User is not registered yet."
  }
```

- `403 Forbidden`: User does not have global admin privileges.
```json
  {
    "detail": "The user doesn't have enough privileges"
  }
```

---

# Demote Global Admin

**Description**: Demote a global admin to a regular user.

**Dependencies**:
- **global_admin_only**: Only users with global admin privileges can access this endpoint.

**Request Body**:
```json
{
  "email": "user@example.com"
}
```

**Responses**:
- `200 OK`: User demoted to regular user.
```json
  {
    "message": "User user@example.com has been successfully removed as a global admin and is now a normal user."
  }
```

- `400 Bad Request`: User not found or another admin does not exist.
```json
  {
    "message": "There must be at least one global admin."
  }
```

- `403 Forbidden`: User does not have global admin privileges.
```json
  {
    "detail": "The user doesn't have enough privileges"
  }
```

---

# Delete User

**Description**: Delete a user and reassign their models.

**Dependencies**:
- **global_admin_only**: Only users with global admin privileges can access this endpoint.

**Request Body**:
```json
{
  "email": "user@example.com"
}
```

**Responses**:
- `200 OK`: User successfully deleted.
```json
  {
    "message": "User with email user@example.com has been successfully deleted."
  }
```

- `404 Not Found`: User not found.
```json
  {
    "message": "User with email user@example.com not found."
  }
```

- `403 Forbidden`: User does not have global admin privileges.
```json
  {
    "detail": "The user doesn't have enough privileges"
  }
```

- `500 Internal Server Error`: Error deleting the user from Keycloak.

---

# Email Login

**Description**: Log in a user with email and password.

**Dependencies**:
- **basic_security**: Requires HTTP Basic Authentication.

**Request Body**:
```json
{
  "username": "johndoe@example.com",
  "password": "securepassword"
}
```

**Responses**:
- `200 OK`: Successfully logged in.
```json
  {
    "message": "Successfully logged in via email",
    "data": {
      "user": {
        "username": "johndoe",
        "email": "johndoe@example.com",
        "user_id": "123"
      },
      "access_token": "some_access_token",
      "verified": true
    }
  }
```

- `400 Bad Request`: User is not verified.
```json
  {
    "message": "User is not verified yet."
  }
```

- `401 Unauthorized`: Invalid credentials.
```json
  {
    "message": "Invalid password."
  }
```

---

# Email Login with Keycloak

**Description**: Log in using a Keycloak access token. It verifies the token directly in this function and returns user info.
If the user does not exist, we create the user here.

**Request Body**:
```json
{
  "access_token": "your_keycloak_access_token"
}
```

**Responses**:
- `200 OK`: Successfully logged in using Keycloak token.
```json
  {
    "message": "Successfully logged in using Keycloak token.",
    "data": {
      "user": {
        "username": "johndoe",
        "email": "johndoe@example.com",
        "user_id": "123"
      },
      "access_token": "your_keycloak_access_token"
    }
  }
```

- `500 Internal Server Error`: Keycloak login failed.

---

# Reset Password

**Description**: Request to reset the password for the given email.

**Query Parameter**:
- `email`: The email address of the user to reset the password for.

**Responses**:
- `200 OK`: Reset password email sent.
```json
  {
    "message": "Successfully sent the verification code to mail."
  }
```

- `400 Bad Request`: Email not registered.
```json
  {
    "message": "This email is not registered with any account."
  }
```

---

# New Password

**Description**: Reset the password after verifying the reset code which is sent via email when calling the `/reset-password` endpoint.

**Request Body**:
```json
{
  "email": "johndoe@example.com",
  "reset_password_code": "123456",
  "new_password": "newsecurepassword"
}
```

**Responses**:
- `200 OK`: Password successfully reset.
```json
  {
    "message": "Successfully changed the password."
  }
```

- `400 Bad Request`: Invalid or expired reset code.
```json
  {
    "message": "Invalid reset code."
  }
```

---

# List Accessible Users

**Description**: List users along with their team memberships and roles according to the access level of the authenticated user.

- Global Admin: All users
- Not Global Admin: Union of all members from teams in which the user is either Member or Admin.

**Dependencies**:
- **verify_access_token**: Requires the user to be authenticated via a valid JWT token.

**Responses**:
- `200 OK`: List of users with team details.
```json
  {
    "message": "Successfully got the list of all users",
    "data": [
      {
        "id": "123",
        "username": "johndoe",
        "email": "johndoe@example.com",
        "global_admin": true,
        "teams": [
          {
            "team_id": "1",
            "team_name": "Team A",
            "role": "admin"
          }
        ]
      }
    ]
  }
```

- `401 Unauthorized`: User not authenticated.
```json
  {
    "message": "Authentication required."
  }
```
---

# Get User Info

**Description**: Get detailed information about the authenticated user.

**Dependencies**:
- **verify_access_token**: Requires the user to be authenticated via a valid JWT token.

**Responses**:
- `200 OK`: User information.
```json
  {
    "message": "Successfully retrieved user information",
    "data": {
      "id": "123",
      "username": "johndoe",
      "email": "johndoe@example.com",
      "global_admin": true,
      "teams": [
        {
          "team_id": "1",
          "team_name": "Team A",
          "role": "admin"
        }
      ]
    }
  }
```

- `404 Not Found`: User not found.
```json
  {
    "message": "User not found"
  }
```

---

# Add User by Global Admin

**Description**: Allows a global admin to add a new user to the system.

**Dependencies**:
- **global_admin_only**: Only users with global admin privileges can access this endpoint.

**Request Body**:
{
  "username": "new_user",
  "email": "new_user@example.com",
  "password": "secure_password"
}

**Responses**:
- `200 OK`: User successfully added.
{
  "message": "Successfully added user new_user.",
  "data": {
    "user_id": "12345",
    "email": "new_user@example.com"
  }
}

- `400 Bad Request`: Email or username already exists.

---

# Verify User by Global Admin

**Description**: Allows a global admin to verify an existing user.

**Dependencies**:
- **global_admin_only**: Only users with global admin privileges can access this endpoint.

**Request Body**:
{
  "email": "user_to_verify@example.com"
}

**Responses**:
- `200 OK`: User successfully verified.
{
  "message": "User user_to_verify@example.com has been successfully verified."
}

- `404 Not Found`: User not found.

- `400 Bad Request`: User is already verified.