"""Initial migration

Revision ID: f2b04f674b1e
Revises: 
Create Date: 2024-09-09 14:27:23.157880

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f2b04f674b1e"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "catalog",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column(
            "task", postgresql.ENUM("TEXT", "TOKEN", name="udt_task"), nullable=False
        ),
        sa.Column("num_generated_samples", sa.Integer(), nullable=True),
        sa.Column("target_labels", sa.ARRAY(sa.String()), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "teams",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "users",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("email", sa.String(length=254), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=True),
        sa.Column("verified", sa.Boolean(), nullable=True, server_default="false"),
        sa.Column(
            "verification_token",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=True,
        ),
        sa.Column("global_admin", sa.Boolean(), nullable=False, server_default="false"),
        sa.Column("reset_password_code", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
        sa.UniqueConstraint("verification_token"),
    )
    op.create_table(
        "workflow_types",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("description", sa.String(length=512), nullable=True),
        sa.Column("model_requirements", sa.JSON(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "models",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "train_status",
            postgresql.ENUM(
                "not_started",
                "starting",
                "in_progress",
                "stopped",
                "complete",
                "failed",
                name="status",
            ),
            nullable=False,
            server_default=sa.text("'not_started'::status"),
        ),
        sa.Column(
            "deploy_status",
            postgresql.ENUM(
                "not_started",
                "starting",
                "in_progress",
                "stopped",
                "complete",
                "failed",
                name="status",
            ),
            nullable=False,
            server_default=sa.text("'not_started'::status"),
        ),
        sa.Column("type", sa.String(length=256), nullable=False),
        sa.Column("sub_type", sa.String(length=256), nullable=True),
        sa.Column("downloads", sa.Integer(), nullable=False, server_default="0"),
        sa.Column(
            "access_level",
            postgresql.ENUM("private", "protected", "public", name="access"),
            nullable=False,
            server_default=sa.text("'private'::access"),
        ),
        sa.Column("domain", sa.String(), nullable=True),
        sa.Column("published_date", sa.DateTime(), nullable=True),
        sa.Column(
            "default_permission",
            postgresql.ENUM("read", "write", name="permission"),
            nullable=False,
            server_default=sa.text("'read'::permission"),
        ),
        sa.Column("parent_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("team_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(["parent_id"], ["models.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "name"),
    )
    op.create_index(
        "model_identifier_index", "models", ["user_id", "name"], unique=False
    )
    op.create_index("train_status_index", "models", ["train_status"], unique=False)
    op.create_table(
        "user_teams",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("team_id", sa.UUID(), nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("user", "team_admin", "global_admin", name="role"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["teams.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "team_id"),
    )
    op.create_table(
        "workflows",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("name", sa.String(length=256), nullable=False),
        sa.Column("type_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("inactive", "active", name="workflowstatus"),
            nullable=False,
            server_default=sa.text("'inactive'::workflowstatus"),
        ),
        sa.Column("published_date", sa.DateTime(), nullable=True),
        sa.Column("gen_ai_provider", sa.String(length=256), nullable=True),
        sa.ForeignKeyConstraint(
            ["type_id"],
            ["workflow_types.id"],
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "user_id", name="unique_workflow_name_user"),
    )
    op.create_table(
        "logs",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("action", sa.String(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.Column("data", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["model_id"], ["models.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("log_model_index", "logs", ["model_id"], unique=False)
    op.create_index("log_user_index", "logs", ["user_id"], unique=False)
    op.create_table(
        "metadata",
        sa.Column("general", sa.JSON(), nullable=True),
        sa.Column("train", sa.JSON(), nullable=True),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["model_id"], ["models.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("model_id"),
    )
    op.create_table(
        "model_permissions",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column(
            "permission",
            postgresql.ENUM("read", "write", name="permission"),
            nullable=False,
            server_default=sa.text("'read'::permission"),
        ),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["models.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "model_id"),
    )
    op.create_table(
        "model_shards",
        sa.Column("shard_num", sa.Integer(), nullable=False),
        sa.Column(
            "train_status",
            postgresql.ENUM(
                "not_started",
                "starting",
                "in_progress",
                "stopped",
                "complete",
                "failed",
                name="status",
            ),
            nullable=False,
            server_default=sa.text("'not_started'::status"),
        ),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["model_id"], ["models.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("shard_num", "model_id"),
    )
    op.create_table(
        "workflow_models",
        sa.Column("workflow_id", sa.UUID(), nullable=False),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column("component", sa.String(length=256), nullable=False),
        sa.ForeignKeyConstraint(["model_id"], ["models.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["workflow_id"], ["workflows.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("workflow_id", "model_id", "component"),
        sa.UniqueConstraint(
            "workflow_id",
            "model_id",
            "component",
            name="unique_workflow_model_component",
        ),
    )
    op.create_index(
        "model_workflow_index", "workflow_models", ["model_id"], unique=False
    )
    op.create_index(
        "workflow_model_index", "workflow_models", ["workflow_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("workflow_model_index", table_name="workflow_models")
    op.drop_index("model_workflow_index", table_name="workflow_models")
    op.drop_table("workflow_models")
    op.drop_table("model_shards")
    op.drop_table("model_permissions")
    op.drop_table("metadata")
    op.drop_index("log_user_index", table_name="logs")
    op.drop_index("log_model_index", table_name="logs")
    op.drop_table("logs")
    op.drop_table("workflows")
    op.drop_table("user_teams")
    op.drop_index("train_status_index", table_name="models")
    op.drop_index("model_identifier_index", table_name="models")
    op.drop_table("models")
    op.drop_table("workflow_types")
    op.drop_table("users")
    op.drop_table("teams")
    op.drop_table("catalog")
    op.execute("DROP TYPE udt_task")
    op.execute("DROP TYPE status")
    op.execute("DROP TYPE access")
    op.execute("DROP TYPE permission")
    op.execute("DROP TYPE role")
    op.execute("DROP TYPE workflowstatus")
    # ### end Alembic commands ###
